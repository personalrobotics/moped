/**
\mainpage
\htmlinclude manifest.html

\b MOPED \b Modeling 
 is a modeling tool for the object recognition system MOPED.
It consists of a set of matlab scripts that generate models from pictures and
exports them in the XML format that MOPED requires.

\section software Software installation
Before starting to generate your object models, you need to compile some tools.
First, uncompress and compile Bundler (Noah Snavely). 
\verbatim
    $ cd moped2/modeling/bundler
    $ tar -xzf bundler.tar.gz
    $ cd bundler
    $ make
\endverbatim

You also need to compile a couple of Matlab MEX libraries. In order to do so, open
Matlab and type:
\verbatim
    $ matlab
    > cd moped2/modeling
    > compile_all
\endverbatim 

\section model How to create a new 3D model from scratch

The general process is as follows: (1) take pictures, (2) segment pictures, (3) run
bundle adjustment, (4) align/scale model to match real world.
Some recommendations: Picture sizes between 640x480 and 1600x1200 are the most
useful.  Usually, good models have between 600-800 and 2000-3000 features,
depending on the object complexity. More features are in general not that
useful, and will only make MOPED slower. My take on picture size is to try a
smaller size first, see the resulting model, and if it's not good enough, try a
larger picture size. The original pictures and masks are usually at 1600x1200,
and 'imundistort_folder.m' can be used to rescale both images and masks to
different sizes. Type 'help imundistort_folder' for details on how to do this.

NOTE: '>' denotes a matlab command. Substitute OBJECT_NAME for whatever name you want
NOTE 2: OBJECT_NAME must be a \b UNIQUE \endb model name, otherwise moped2 will complain.
NOTE 3: If any of these commands are unclear, type 'help COMMAND' in matlab to
display usage details and help for each function.
NOTE 4: Backing up your pictures is recommended, as they might be modified during the 
model generation process.
NOTE 5: Do NOT put any other data in your images folder other than your images and
masks. In particular, no .mat files! 

- 1) Take pictures all around the object. Usually, between 40 and 60 are
  enough, but you should experiment.

- 2) Save pictures in folder of your choice (e.g. '/home/user/objects/OBJECT_NAME')

- 3) Open matlab

- 4) Add the relevant paths to the Matlab path: 
\verbatim    
    > cd moped2/modeling; %(or whatever folder the modeling software is in) 
    > add_modeling_paths();
\endverbatim

- 6) Load camera parameters, in the format provided  by Bouguet's Camera
  Calibration Toolbox for Matlab (make sure same format as the example file is
  used!). Example: 
\verbatim 
    > load moped2/modeling/example_cam.mat; % Loads variables K, KK, kc (camera distortion) 
\endverbatim

- 7) Initialize variables (the images folder and the output folder should be
  different!):
\verbatim
    > img_dir = '/home/user/objects/OBJECT_NAME'; % CAREFUL: NEED FULL PATH (no ~)
    > out_dir = '/home/user/objects/OBJECT_MODEL_NAME'; % CAREFUL: NEED FULL PATH (no ~)
\endverbatim

- 8) Undistort the images:
\verbatim   
    > imundistort_folder(img_dir, KK, kc); 
\endverbatim

- 9) Segment the object in all images
\verbatim
    > draw_mask(img_dir); % left click adds anchor point, right click goes to next image
\endverbatim

- 10) Go to images folder
\verbatim   
    > cd (img_dir); 
\endverbatim

- 11) Run modeling software. Remember to put your image resolution in [width height] format.
\verbatim   > model = sfm_bundler(OBJECT_NAME, img_dir, out_dir, KK, zeros(5,1), [1600 1200]);

- 12) Verify if model looks reasonable (look if the point cloud resembles the object shape)
\verbatim
    > sfm_view(model, 'all');
\endverbatim

- 13) If it looks good, save model (important!). If not, ask for help!
\verbatim
    > save (['model_' OBJECT_NAME '.mat'], 'model');
\endverbatim

- 14) [Optional] If you care about object localization in the real world, you
  should fix the object scale and coordinate frame so that they are e.g. at the
center of the object. My recommendation is to first place the coordinate frame
correctly (and with Z axis pointing up) and then fix the scale. For the scale,
you need to measure your object (in meters!), and then use the scale bar within
our software until the side of your object measures the same in the screen as
the one you have measured (again, all units are in meters). To run our scaling tool, type:
\verbatim
    > sfm_alignment_gui(model);
\endverbatim

- 15) Export model to XML format in the models folder
\verbatim
    > sfm_export_xml('moped2/models/OBJECT_NAME.moped.xml', model);
\endverbatim

\section planarmodel How to create a new planar model from scratch
If the object that is being modeled is a single-sided plane, a simpler process 
can be used to generate a model for MOPED.  In this method, only a single 
rectilinear image is processed.

- 1) Take a single picture of the planar object that includes a size reference. Ideally 
the object should be parallel to the image plane and as large as possible.

- 2) Save picture in folder of your choice (e.g. '/home/user/objects/OBJECT_NAME.jpg')

- 3) Open the image in an image editor. Use the size reference to compute the pixels 
per meter of the surface of the planar object. Then, crop the image as tightly as 
possible around the object.

- 4) Open matlab

- 5) Add the relevant paths to the Matlab path:
\verbatim
    > cd moped2/modeling; %(or whatever folder the modeling software is in)
    > add_modeling_paths();
\endverbatim

- 6) Load the image into Matlab:
\verbatim   > obj_img = imread(img_filename);

- 7) Run planar modeling software.
\verbatim   > model = sfm_bundler_planar('OBJECT_NAME', img_filename, 'OBJECT_NAME.moped.xml', pixels_per_meter);

\section objects Which objects to model?
MOPED2 uses SIFT features and geometric reasoning to recognize objects. This
means that you need be able to generate a sparse 3D model with SIFT features
for your object. The actual model generation uses the Bundler software from
Noah Snavely, that does structure from motion on the set of images. We mask
each image to delete points belonging to the background. Finding such types of
objects is sometimes not that easy. Textured objects with some sharp edges
(e.g. not too small text) are usually best. You can find some examples of the
kind of objects that we model in the modeling/examples folder.

If you run the modeling stage on an object and it does not work, you should try
again with better resolution or more textured images. A *very* important trick
is to use something with A LOT of texture as the ground plane (e.g. some old
poster from a conference). That will ensure that the camera positions are
registered accurately (again, see examples in the modeling/examples folder).

Sometimes, your objects will have two textured faces and be completely white
otherwise. If that is the case, you also have the option of creating two
independent models (on for each face) and then place their coordinate frame in
the same position for both of them. That will ensure that the same object is
detected in the same position, despite having two separate models for it.


Copyright: Carnegie Mellon University & Intel Corporation
Author: Alvaro Collet (acollet@cs.cmu.edu)
*/
